
Traffic light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000052a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000059e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  0000059e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000059e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  0000060c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000127e  00000000  00000000  00000764  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000912  00000000  00000000  000019e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000be9  00000000  00000000  000022f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000214  00000000  00000000  00002ee0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000502  00000000  00000000  000030f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009f7  00000000  00000000  000035f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00003fed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 e6 00 	call	0x1cc	; 0x1cc <main>
  74:	0c 94 93 02 	jmp	0x526	; 0x526 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <app_init>:

#include "App.h"

void app_init (void)
{
		interrupt0_init();  //initialize interrupt
  7c:	0e 94 40 02 	call	0x480	; 0x480 <interrupt0_init>
		
		/************************************************************************/
		/*                   CAR LIGHT Initialize                               */
		/************************************************************************/
		LIGHT_init(car_light_PORT ,green_light); 
  80:	60 e0       	ldi	r22, 0x00	; 0
  82:	81 e4       	ldi	r24, 0x41	; 65
  84:	0e 94 6d 00 	call	0xda	; 0xda <LIGHT_init>
		LIGHT_init(car_light_PORT ,yellow_light);
  88:	61 e0       	ldi	r22, 0x01	; 1
  8a:	81 e4       	ldi	r24, 0x41	; 65
  8c:	0e 94 6d 00 	call	0xda	; 0xda <LIGHT_init>
		LIGHT_init(car_light_PORT ,red_light);
  90:	62 e0       	ldi	r22, 0x02	; 2
  92:	81 e4       	ldi	r24, 0x41	; 65
  94:	0e 94 6d 00 	call	0xda	; 0xda <LIGHT_init>
		/************************************************************************/
		/*                   pedestrian LIGHT Initialize                        */
		/************************************************************************/
		LIGHT_init(pedestrian_light_PORT,green_light);
  98:	60 e0       	ldi	r22, 0x00	; 0
  9a:	83 e4       	ldi	r24, 0x43	; 67
  9c:	0e 94 6d 00 	call	0xda	; 0xda <LIGHT_init>
		LIGHT_init(pedestrian_light_PORT,yellow_light);
  a0:	61 e0       	ldi	r22, 0x01	; 1
  a2:	83 e4       	ldi	r24, 0x43	; 67
  a4:	0e 94 6d 00 	call	0xda	; 0xda <LIGHT_init>
		LIGHT_init(pedestrian_light_PORT,red_light);
  a8:	62 e0       	ldi	r22, 0x02	; 2
  aa:	83 e4       	ldi	r24, 0x43	; 67
  ac:	0e 94 6d 00 	call	0xda	; 0xda <LIGHT_init>
  b0:	08 95       	ret

000000b2 <app_start>:


void app_start(void)
{

			car_go(); //The green light for cars is ON and the red light for pedestrians is on
  b2:	0e 94 88 00 	call	0x110	; 0x110 <car_go>
			timer0_5s_start(); //wait five seconds
  b6:	0e 94 51 02 	call	0x4a2	; 0x4a2 <timer0_5s_start>
	
			waiting(); //The yellow light blinks for five seconds
  ba:	0e 94 a1 00 	call	0x142	; 0x142 <waiting>
			
			pedestrian_go ();//The green light for pedestrians is ON and the red light for cars is on
  be:	0e 94 cd 00 	call	0x19a	; 0x19a <pedestrian_go>
			timer0_5s_start();//wait five seconds
  c2:	0e 94 51 02 	call	0x4a2	; 0x4a2 <timer0_5s_start>
	
			waiting();	//The yellow light blinks for five seconds		
  c6:	0e 94 a1 00 	call	0x142	; 0x142 <waiting>
  ca:	08 95       	ret

000000cc <button_init>:
 */ 

#include "button.h"

void button_init( uint8_t buttonPort ,uint8_t buttonPin )
{
  cc:	98 2f       	mov	r25, r24
  ce:	86 2f       	mov	r24, r22
	DIO_init(buttonPin ,buttonPort , IN);
  d0:	40 e0       	ldi	r20, 0x00	; 0
  d2:	69 2f       	mov	r22, r25
  d4:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <DIO_init>
  d8:	08 95       	ret

000000da <LIGHT_init>:


#include "light.h"

void LIGHT_init (uint8_t lightport ,uint8_t lightpin )
{
  da:	98 2f       	mov	r25, r24
  dc:	86 2f       	mov	r24, r22
	DIO_init(lightpin , lightport , OUT);
  de:	41 e0       	ldi	r20, 0x01	; 1
  e0:	69 2f       	mov	r22, r25
  e2:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <DIO_init>
  e6:	08 95       	ret

000000e8 <LIGHT_on>:
}

void LIGHT_on (uint8_t lightport ,uint8_t lightpin )
{
  e8:	98 2f       	mov	r25, r24
  ea:	86 2f       	mov	r24, r22
	DIO_write(lightpin,lightport,HIGH);
  ec:	41 e0       	ldi	r20, 0x01	; 1
  ee:	69 2f       	mov	r22, r25
  f0:	0e 94 76 01 	call	0x2ec	; 0x2ec <DIO_write>
  f4:	08 95       	ret

000000f6 <LIGHT_off>:
}

void LIGHT_off (uint8_t lightport ,uint8_t lightpin )
{
  f6:	98 2f       	mov	r25, r24
  f8:	86 2f       	mov	r24, r22
	DIO_write(lightpin,lightport,LOW);
  fa:	40 e0       	ldi	r20, 0x00	; 0
  fc:	69 2f       	mov	r22, r25
  fe:	0e 94 76 01 	call	0x2ec	; 0x2ec <DIO_write>
 102:	08 95       	ret

00000104 <LIGHT_toggle>:
}

void LIGHT_toggle (uint8_t lightport ,uint8_t lightpin )
{
 104:	98 2f       	mov	r25, r24
 106:	86 2f       	mov	r24, r22
	DIO_toggle(lightpin ,lightport);
 108:	69 2f       	mov	r22, r25
 10a:	0e 94 01 02 	call	0x402	; 0x402 <DIO_toggle>
 10e:	08 95       	ret

00000110 <car_go>:


void car_go ()
{
	
	LIGHT_on(car_light_PORT ,green_light);
 110:	60 e0       	ldi	r22, 0x00	; 0
 112:	81 e4       	ldi	r24, 0x41	; 65
 114:	0e 94 74 00 	call	0xe8	; 0xe8 <LIGHT_on>
	LIGHT_on(pedestrian_light_PORT,red_light);
 118:	62 e0       	ldi	r22, 0x02	; 2
 11a:	83 e4       	ldi	r24, 0x43	; 67
 11c:	0e 94 74 00 	call	0xe8	; 0xe8 <LIGHT_on>
	
	LIGHT_off(car_light_PORT ,yellow_light);
 120:	61 e0       	ldi	r22, 0x01	; 1
 122:	81 e4       	ldi	r24, 0x41	; 65
 124:	0e 94 7b 00 	call	0xf6	; 0xf6 <LIGHT_off>
	LIGHT_off(pedestrian_light_PORT,yellow_light);
 128:	61 e0       	ldi	r22, 0x01	; 1
 12a:	83 e4       	ldi	r24, 0x43	; 67
 12c:	0e 94 7b 00 	call	0xf6	; 0xf6 <LIGHT_off>
	LIGHT_off(car_light_PORT ,red_light);
 130:	62 e0       	ldi	r22, 0x02	; 2
 132:	81 e4       	ldi	r24, 0x41	; 65
 134:	0e 94 7b 00 	call	0xf6	; 0xf6 <LIGHT_off>
	LIGHT_off(pedestrian_light_PORT,green_light);
 138:	60 e0       	ldi	r22, 0x00	; 0
 13a:	83 e4       	ldi	r24, 0x43	; 67
 13c:	0e 94 7b 00 	call	0xf6	; 0xf6 <LIGHT_off>
 140:	08 95       	ret

00000142 <waiting>:


}

void waiting ()
{    
 142:	cf 93       	push	r28
	
uint8_t Counter;
	Counter=0;
	LIGHT_off(car_light_PORT,green_light);
 144:	60 e0       	ldi	r22, 0x00	; 0
 146:	81 e4       	ldi	r24, 0x41	; 65
 148:	0e 94 7b 00 	call	0xf6	; 0xf6 <LIGHT_off>
	LIGHT_off(pedestrian_light_PORT,red_light);
 14c:	62 e0       	ldi	r22, 0x02	; 2
 14e:	83 e4       	ldi	r24, 0x43	; 67
 150:	0e 94 7b 00 	call	0xf6	; 0xf6 <LIGHT_off>
	LIGHT_off(car_light_PORT,red_light);
 154:	62 e0       	ldi	r22, 0x02	; 2
 156:	81 e4       	ldi	r24, 0x41	; 65
 158:	0e 94 7b 00 	call	0xf6	; 0xf6 <LIGHT_off>
	LIGHT_off(pedestrian_light_PORT,green_light);
 15c:	60 e0       	ldi	r22, 0x00	; 0
 15e:	83 e4       	ldi	r24, 0x43	; 67
 160:	0e 94 7b 00 	call	0xf6	; 0xf6 <LIGHT_off>

void waiting ()
{    
	
uint8_t Counter;
	Counter=0;
 164:	c0 e0       	ldi	r28, 0x00	; 0
	LIGHT_off(car_light_PORT,green_light);
	LIGHT_off(pedestrian_light_PORT,red_light);
	LIGHT_off(car_light_PORT,red_light);
	LIGHT_off(pedestrian_light_PORT,green_light);
	
	while(Counter<5)
 166:	15 c0       	rjmp	.+42     	; 0x192 <waiting+0x50>
	{
		LIGHT_toggle(car_light_PORT,yellow_light);
 168:	61 e0       	ldi	r22, 0x01	; 1
 16a:	81 e4       	ldi	r24, 0x41	; 65
 16c:	0e 94 82 00 	call	0x104	; 0x104 <LIGHT_toggle>
		LIGHT_toggle(pedestrian_light_PORT,yellow_light);
 170:	61 e0       	ldi	r22, 0x01	; 1
 172:	83 e4       	ldi	r24, 0x43	; 67
 174:	0e 94 82 00 	call	0x104	; 0x104 <LIGHT_toggle>
		timer0_500ms_start();
 178:	0e 94 72 02 	call	0x4e4	; 0x4e4 <timer0_500ms_start>
		LIGHT_toggle(car_light_PORT,yellow_light);
 17c:	61 e0       	ldi	r22, 0x01	; 1
 17e:	81 e4       	ldi	r24, 0x41	; 65
 180:	0e 94 82 00 	call	0x104	; 0x104 <LIGHT_toggle>
		LIGHT_toggle(pedestrian_light_PORT,yellow_light);
 184:	61 e0       	ldi	r22, 0x01	; 1
 186:	83 e4       	ldi	r24, 0x43	; 67
 188:	0e 94 82 00 	call	0x104	; 0x104 <LIGHT_toggle>
		timer0_500ms_start();
 18c:	0e 94 72 02 	call	0x4e4	; 0x4e4 <timer0_500ms_start>

		Counter++;
 190:	cf 5f       	subi	r28, 0xFF	; 255
	LIGHT_off(car_light_PORT,green_light);
	LIGHT_off(pedestrian_light_PORT,red_light);
	LIGHT_off(car_light_PORT,red_light);
	LIGHT_off(pedestrian_light_PORT,green_light);
	
	while(Counter<5)
 192:	c5 30       	cpi	r28, 0x05	; 5
 194:	48 f3       	brcs	.-46     	; 0x168 <waiting+0x26>
		LIGHT_toggle(pedestrian_light_PORT,yellow_light);
		timer0_500ms_start();

		Counter++;
	}
}
 196:	cf 91       	pop	r28
 198:	08 95       	ret

0000019a <pedestrian_go>:

void pedestrian_go ()
{
	LIGHT_on(car_light_PORT ,red_light);
 19a:	62 e0       	ldi	r22, 0x02	; 2
 19c:	81 e4       	ldi	r24, 0x41	; 65
 19e:	0e 94 74 00 	call	0xe8	; 0xe8 <LIGHT_on>
	LIGHT_on(pedestrian_light_PORT,green_light);
 1a2:	60 e0       	ldi	r22, 0x00	; 0
 1a4:	83 e4       	ldi	r24, 0x43	; 67
 1a6:	0e 94 74 00 	call	0xe8	; 0xe8 <LIGHT_on>
	
	 LIGHT_off(car_light_PORT,yellow_light);
 1aa:	61 e0       	ldi	r22, 0x01	; 1
 1ac:	81 e4       	ldi	r24, 0x41	; 65
 1ae:	0e 94 7b 00 	call	0xf6	; 0xf6 <LIGHT_off>
	 LIGHT_off(pedestrian_light_PORT,yellow_light);
 1b2:	61 e0       	ldi	r22, 0x01	; 1
 1b4:	83 e4       	ldi	r24, 0x43	; 67
 1b6:	0e 94 7b 00 	call	0xf6	; 0xf6 <LIGHT_off>
	 LIGHT_off(car_light_PORT,green_light);
 1ba:	60 e0       	ldi	r22, 0x00	; 0
 1bc:	81 e4       	ldi	r24, 0x41	; 65
 1be:	0e 94 7b 00 	call	0xf6	; 0xf6 <LIGHT_off>
	 LIGHT_off(pedestrian_light_PORT,red_light);
 1c2:	62 e0       	ldi	r22, 0x02	; 2
 1c4:	83 e4       	ldi	r24, 0x43	; 67
 1c6:	0e 94 7b 00 	call	0xf6	; 0xf6 <LIGHT_off>
 1ca:	08 95       	ret

000001cc <main>:
#include "Application/App.h"

int main(void)
{
	
	app_init(); //initialize Application 
 1cc:	0e 94 3e 00 	call	0x7c	; 0x7c <app_init>

    while (1) 
    {	
		app_start(); // start Application
 1d0:	0e 94 59 00 	call	0xb2	; 0xb2 <app_start>
 1d4:	fd cf       	rjmp	.-6      	; 0x1d0 <main+0x4>

000001d6 <DIO_init>:
		case PORT_C:
			*value = checkbit(PINC ,pinNmber);
		break;
		
		case PORT_D:
			*value = checkbit(PIND ,pinNmber);
 1d6:	62 34       	cpi	r22, 0x42	; 66
 1d8:	59 f1       	breq	.+86     	; 0x230 <DIO_init+0x5a>
 1da:	18 f4       	brcc	.+6      	; 0x1e2 <DIO_init+0xc>
 1dc:	61 34       	cpi	r22, 0x41	; 65
 1de:	41 f0       	breq	.+16     	; 0x1f0 <DIO_init+0x1a>
 1e0:	08 95       	ret
 1e2:	63 34       	cpi	r22, 0x43	; 67
 1e4:	09 f4       	brne	.+2      	; 0x1e8 <DIO_init+0x12>
 1e6:	44 c0       	rjmp	.+136    	; 0x270 <DIO_init+0x9a>
 1e8:	64 34       	cpi	r22, 0x44	; 68
 1ea:	09 f4       	brne	.+2      	; 0x1ee <DIO_init+0x18>
 1ec:	60 c0       	rjmp	.+192    	; 0x2ae <DIO_init+0xd8>
 1ee:	08 95       	ret
 1f0:	41 11       	cpse	r20, r1
 1f2:	0e c0       	rjmp	.+28     	; 0x210 <DIO_init+0x3a>
 1f4:	4a b3       	in	r20, 0x1a	; 26
 1f6:	21 e0       	ldi	r18, 0x01	; 1
 1f8:	30 e0       	ldi	r19, 0x00	; 0
 1fa:	b9 01       	movw	r22, r18
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <DIO_init+0x2c>
 1fe:	66 0f       	add	r22, r22
 200:	77 1f       	adc	r23, r23
 202:	8a 95       	dec	r24
 204:	e2 f7       	brpl	.-8      	; 0x1fe <DIO_init+0x28>
 206:	cb 01       	movw	r24, r22
 208:	80 95       	com	r24
 20a:	84 23       	and	r24, r20
 20c:	8a bb       	out	0x1a, r24	; 26
 20e:	08 95       	ret
 210:	41 30       	cpi	r20, 0x01	; 1
 212:	09 f0       	breq	.+2      	; 0x216 <DIO_init+0x40>
 214:	6a c0       	rjmp	.+212    	; 0x2ea <DIO_init+0x114>
 216:	4a b3       	in	r20, 0x1a	; 26
 218:	21 e0       	ldi	r18, 0x01	; 1
 21a:	30 e0       	ldi	r19, 0x00	; 0
 21c:	b9 01       	movw	r22, r18
 21e:	02 c0       	rjmp	.+4      	; 0x224 <DIO_init+0x4e>
 220:	66 0f       	add	r22, r22
 222:	77 1f       	adc	r23, r23
 224:	8a 95       	dec	r24
 226:	e2 f7       	brpl	.-8      	; 0x220 <DIO_init+0x4a>
 228:	cb 01       	movw	r24, r22
 22a:	84 2b       	or	r24, r20
 22c:	8a bb       	out	0x1a, r24	; 26
 22e:	08 95       	ret
 230:	41 11       	cpse	r20, r1
 232:	0e c0       	rjmp	.+28     	; 0x250 <DIO_init+0x7a>
 234:	47 b3       	in	r20, 0x17	; 23
 236:	21 e0       	ldi	r18, 0x01	; 1
 238:	30 e0       	ldi	r19, 0x00	; 0
 23a:	b9 01       	movw	r22, r18
 23c:	02 c0       	rjmp	.+4      	; 0x242 <DIO_init+0x6c>
 23e:	66 0f       	add	r22, r22
 240:	77 1f       	adc	r23, r23
 242:	8a 95       	dec	r24
 244:	e2 f7       	brpl	.-8      	; 0x23e <DIO_init+0x68>
 246:	cb 01       	movw	r24, r22
 248:	80 95       	com	r24
 24a:	84 23       	and	r24, r20
 24c:	87 bb       	out	0x17, r24	; 23
 24e:	08 95       	ret
 250:	41 30       	cpi	r20, 0x01	; 1
 252:	09 f0       	breq	.+2      	; 0x256 <DIO_init+0x80>
 254:	4a c0       	rjmp	.+148    	; 0x2ea <DIO_init+0x114>
 256:	47 b3       	in	r20, 0x17	; 23
 258:	21 e0       	ldi	r18, 0x01	; 1
 25a:	30 e0       	ldi	r19, 0x00	; 0
 25c:	b9 01       	movw	r22, r18
 25e:	02 c0       	rjmp	.+4      	; 0x264 <DIO_init+0x8e>
 260:	66 0f       	add	r22, r22
 262:	77 1f       	adc	r23, r23
 264:	8a 95       	dec	r24
 266:	e2 f7       	brpl	.-8      	; 0x260 <DIO_init+0x8a>
 268:	cb 01       	movw	r24, r22
 26a:	84 2b       	or	r24, r20
 26c:	87 bb       	out	0x17, r24	; 23
 26e:	08 95       	ret
 270:	41 11       	cpse	r20, r1
 272:	0e c0       	rjmp	.+28     	; 0x290 <DIO_init+0xba>
 274:	44 b3       	in	r20, 0x14	; 20
 276:	21 e0       	ldi	r18, 0x01	; 1
 278:	30 e0       	ldi	r19, 0x00	; 0
 27a:	b9 01       	movw	r22, r18
 27c:	02 c0       	rjmp	.+4      	; 0x282 <DIO_init+0xac>
 27e:	66 0f       	add	r22, r22
 280:	77 1f       	adc	r23, r23
 282:	8a 95       	dec	r24
 284:	e2 f7       	brpl	.-8      	; 0x27e <DIO_init+0xa8>
 286:	cb 01       	movw	r24, r22
 288:	80 95       	com	r24
 28a:	84 23       	and	r24, r20
 28c:	84 bb       	out	0x14, r24	; 20
 28e:	08 95       	ret
 290:	41 30       	cpi	r20, 0x01	; 1
 292:	59 f5       	brne	.+86     	; 0x2ea <DIO_init+0x114>
 294:	44 b3       	in	r20, 0x14	; 20
 296:	21 e0       	ldi	r18, 0x01	; 1
 298:	30 e0       	ldi	r19, 0x00	; 0
 29a:	b9 01       	movw	r22, r18
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <DIO_init+0xcc>
 29e:	66 0f       	add	r22, r22
 2a0:	77 1f       	adc	r23, r23
 2a2:	8a 95       	dec	r24
 2a4:	e2 f7       	brpl	.-8      	; 0x29e <DIO_init+0xc8>
 2a6:	cb 01       	movw	r24, r22
 2a8:	84 2b       	or	r24, r20
 2aa:	84 bb       	out	0x14, r24	; 20
 2ac:	08 95       	ret
 2ae:	41 11       	cpse	r20, r1
 2b0:	0e c0       	rjmp	.+28     	; 0x2ce <DIO_init+0xf8>
 2b2:	41 b3       	in	r20, 0x11	; 17
 2b4:	21 e0       	ldi	r18, 0x01	; 1
 2b6:	30 e0       	ldi	r19, 0x00	; 0
 2b8:	b9 01       	movw	r22, r18
 2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <DIO_init+0xea>
 2bc:	66 0f       	add	r22, r22
 2be:	77 1f       	adc	r23, r23
 2c0:	8a 95       	dec	r24
 2c2:	e2 f7       	brpl	.-8      	; 0x2bc <DIO_init+0xe6>
 2c4:	cb 01       	movw	r24, r22
 2c6:	80 95       	com	r24
 2c8:	84 23       	and	r24, r20
 2ca:	81 bb       	out	0x11, r24	; 17
 2cc:	08 95       	ret
 2ce:	41 30       	cpi	r20, 0x01	; 1
 2d0:	61 f4       	brne	.+24     	; 0x2ea <DIO_init+0x114>
 2d2:	41 b3       	in	r20, 0x11	; 17
 2d4:	21 e0       	ldi	r18, 0x01	; 1
 2d6:	30 e0       	ldi	r19, 0x00	; 0
 2d8:	b9 01       	movw	r22, r18
 2da:	02 c0       	rjmp	.+4      	; 0x2e0 <DIO_init+0x10a>
 2dc:	66 0f       	add	r22, r22
 2de:	77 1f       	adc	r23, r23
 2e0:	8a 95       	dec	r24
 2e2:	e2 f7       	brpl	.-8      	; 0x2dc <DIO_init+0x106>
 2e4:	cb 01       	movw	r24, r22
 2e6:	84 2b       	or	r24, r20
 2e8:	81 bb       	out	0x11, r24	; 17
 2ea:	08 95       	ret

000002ec <DIO_write>:
 2ec:	62 34       	cpi	r22, 0x42	; 66
 2ee:	59 f1       	breq	.+86     	; 0x346 <DIO_write+0x5a>
 2f0:	18 f4       	brcc	.+6      	; 0x2f8 <DIO_write+0xc>
 2f2:	61 34       	cpi	r22, 0x41	; 65
 2f4:	41 f0       	breq	.+16     	; 0x306 <DIO_write+0x1a>
 2f6:	08 95       	ret
 2f8:	63 34       	cpi	r22, 0x43	; 67
 2fa:	09 f4       	brne	.+2      	; 0x2fe <DIO_write+0x12>
 2fc:	44 c0       	rjmp	.+136    	; 0x386 <DIO_write+0x9a>
 2fe:	64 34       	cpi	r22, 0x44	; 68
 300:	09 f4       	brne	.+2      	; 0x304 <DIO_write+0x18>
 302:	60 c0       	rjmp	.+192    	; 0x3c4 <DIO_write+0xd8>
 304:	08 95       	ret
 306:	41 11       	cpse	r20, r1
 308:	0e c0       	rjmp	.+28     	; 0x326 <DIO_write+0x3a>
 30a:	4b b3       	in	r20, 0x1b	; 27
 30c:	21 e0       	ldi	r18, 0x01	; 1
 30e:	30 e0       	ldi	r19, 0x00	; 0
 310:	b9 01       	movw	r22, r18
 312:	02 c0       	rjmp	.+4      	; 0x318 <DIO_write+0x2c>
 314:	66 0f       	add	r22, r22
 316:	77 1f       	adc	r23, r23
 318:	8a 95       	dec	r24
 31a:	e2 f7       	brpl	.-8      	; 0x314 <DIO_write+0x28>
 31c:	cb 01       	movw	r24, r22
 31e:	80 95       	com	r24
 320:	84 23       	and	r24, r20
 322:	8b bb       	out	0x1b, r24	; 27
 324:	08 95       	ret
 326:	41 30       	cpi	r20, 0x01	; 1
 328:	09 f0       	breq	.+2      	; 0x32c <DIO_write+0x40>
 32a:	6a c0       	rjmp	.+212    	; 0x400 <__EEPROM_REGION_LENGTH__>
 32c:	4b b3       	in	r20, 0x1b	; 27
 32e:	21 e0       	ldi	r18, 0x01	; 1
 330:	30 e0       	ldi	r19, 0x00	; 0
 332:	b9 01       	movw	r22, r18
 334:	02 c0       	rjmp	.+4      	; 0x33a <DIO_write+0x4e>
 336:	66 0f       	add	r22, r22
 338:	77 1f       	adc	r23, r23
 33a:	8a 95       	dec	r24
 33c:	e2 f7       	brpl	.-8      	; 0x336 <DIO_write+0x4a>
 33e:	cb 01       	movw	r24, r22
 340:	84 2b       	or	r24, r20
 342:	8b bb       	out	0x1b, r24	; 27
 344:	08 95       	ret
 346:	41 11       	cpse	r20, r1
 348:	0e c0       	rjmp	.+28     	; 0x366 <DIO_write+0x7a>
 34a:	48 b3       	in	r20, 0x18	; 24
 34c:	21 e0       	ldi	r18, 0x01	; 1
 34e:	30 e0       	ldi	r19, 0x00	; 0
 350:	b9 01       	movw	r22, r18
 352:	02 c0       	rjmp	.+4      	; 0x358 <DIO_write+0x6c>
 354:	66 0f       	add	r22, r22
 356:	77 1f       	adc	r23, r23
 358:	8a 95       	dec	r24
 35a:	e2 f7       	brpl	.-8      	; 0x354 <DIO_write+0x68>
 35c:	cb 01       	movw	r24, r22
 35e:	80 95       	com	r24
 360:	84 23       	and	r24, r20
 362:	88 bb       	out	0x18, r24	; 24
 364:	08 95       	ret
 366:	41 30       	cpi	r20, 0x01	; 1
 368:	09 f0       	breq	.+2      	; 0x36c <DIO_write+0x80>
 36a:	4a c0       	rjmp	.+148    	; 0x400 <__EEPROM_REGION_LENGTH__>
 36c:	48 b3       	in	r20, 0x18	; 24
 36e:	21 e0       	ldi	r18, 0x01	; 1
 370:	30 e0       	ldi	r19, 0x00	; 0
 372:	b9 01       	movw	r22, r18
 374:	02 c0       	rjmp	.+4      	; 0x37a <DIO_write+0x8e>
 376:	66 0f       	add	r22, r22
 378:	77 1f       	adc	r23, r23
 37a:	8a 95       	dec	r24
 37c:	e2 f7       	brpl	.-8      	; 0x376 <DIO_write+0x8a>
 37e:	cb 01       	movw	r24, r22
 380:	84 2b       	or	r24, r20
 382:	88 bb       	out	0x18, r24	; 24
 384:	08 95       	ret
 386:	41 11       	cpse	r20, r1
 388:	0e c0       	rjmp	.+28     	; 0x3a6 <DIO_write+0xba>
 38a:	45 b3       	in	r20, 0x15	; 21
 38c:	21 e0       	ldi	r18, 0x01	; 1
 38e:	30 e0       	ldi	r19, 0x00	; 0
 390:	b9 01       	movw	r22, r18
 392:	02 c0       	rjmp	.+4      	; 0x398 <DIO_write+0xac>
 394:	66 0f       	add	r22, r22
 396:	77 1f       	adc	r23, r23
 398:	8a 95       	dec	r24
 39a:	e2 f7       	brpl	.-8      	; 0x394 <DIO_write+0xa8>
 39c:	cb 01       	movw	r24, r22
 39e:	80 95       	com	r24
 3a0:	84 23       	and	r24, r20
 3a2:	85 bb       	out	0x15, r24	; 21
 3a4:	08 95       	ret
 3a6:	41 30       	cpi	r20, 0x01	; 1
 3a8:	59 f5       	brne	.+86     	; 0x400 <__EEPROM_REGION_LENGTH__>
 3aa:	45 b3       	in	r20, 0x15	; 21
 3ac:	21 e0       	ldi	r18, 0x01	; 1
 3ae:	30 e0       	ldi	r19, 0x00	; 0
 3b0:	b9 01       	movw	r22, r18
 3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <DIO_write+0xcc>
 3b4:	66 0f       	add	r22, r22
 3b6:	77 1f       	adc	r23, r23
 3b8:	8a 95       	dec	r24
 3ba:	e2 f7       	brpl	.-8      	; 0x3b4 <DIO_write+0xc8>
 3bc:	cb 01       	movw	r24, r22
 3be:	84 2b       	or	r24, r20
 3c0:	85 bb       	out	0x15, r24	; 21
 3c2:	08 95       	ret
 3c4:	41 11       	cpse	r20, r1
 3c6:	0e c0       	rjmp	.+28     	; 0x3e4 <DIO_write+0xf8>
 3c8:	42 b3       	in	r20, 0x12	; 18
 3ca:	21 e0       	ldi	r18, 0x01	; 1
 3cc:	30 e0       	ldi	r19, 0x00	; 0
 3ce:	b9 01       	movw	r22, r18
 3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <DIO_write+0xea>
 3d2:	66 0f       	add	r22, r22
 3d4:	77 1f       	adc	r23, r23
 3d6:	8a 95       	dec	r24
 3d8:	e2 f7       	brpl	.-8      	; 0x3d2 <DIO_write+0xe6>
 3da:	cb 01       	movw	r24, r22
 3dc:	80 95       	com	r24
 3de:	84 23       	and	r24, r20
 3e0:	82 bb       	out	0x12, r24	; 18
 3e2:	08 95       	ret
 3e4:	41 30       	cpi	r20, 0x01	; 1
 3e6:	61 f4       	brne	.+24     	; 0x400 <__EEPROM_REGION_LENGTH__>
 3e8:	42 b3       	in	r20, 0x12	; 18
 3ea:	21 e0       	ldi	r18, 0x01	; 1
 3ec:	30 e0       	ldi	r19, 0x00	; 0
 3ee:	b9 01       	movw	r22, r18
 3f0:	02 c0       	rjmp	.+4      	; 0x3f6 <DIO_write+0x10a>
 3f2:	66 0f       	add	r22, r22
 3f4:	77 1f       	adc	r23, r23
 3f6:	8a 95       	dec	r24
 3f8:	e2 f7       	brpl	.-8      	; 0x3f2 <DIO_write+0x106>
 3fa:	cb 01       	movw	r24, r22
 3fc:	84 2b       	or	r24, r20
 3fe:	82 bb       	out	0x12, r24	; 18
 400:	08 95       	ret

00000402 <DIO_toggle>:
}


void DIO_toggle (uint8_t pinNmber ,uint8_t portNumber )
{
	switch(portNumber)
 402:	62 34       	cpi	r22, 0x42	; 66
 404:	b1 f0       	breq	.+44     	; 0x432 <DIO_toggle+0x30>
 406:	18 f4       	brcc	.+6      	; 0x40e <DIO_toggle+0xc>
 408:	61 34       	cpi	r22, 0x41	; 65
 40a:	31 f0       	breq	.+12     	; 0x418 <DIO_toggle+0x16>
 40c:	08 95       	ret
 40e:	63 34       	cpi	r22, 0x43	; 67
 410:	e9 f0       	breq	.+58     	; 0x44c <DIO_toggle+0x4a>
 412:	64 34       	cpi	r22, 0x44	; 68
 414:	41 f1       	breq	.+80     	; 0x466 <DIO_toggle+0x64>
 416:	08 95       	ret
	{
		case PORT_A:
			togglebit(PORTA , pinNmber);
 418:	4b b3       	in	r20, 0x1b	; 27
 41a:	21 e0       	ldi	r18, 0x01	; 1
 41c:	30 e0       	ldi	r19, 0x00	; 0
 41e:	b9 01       	movw	r22, r18
 420:	02 c0       	rjmp	.+4      	; 0x426 <DIO_toggle+0x24>
 422:	66 0f       	add	r22, r22
 424:	77 1f       	adc	r23, r23
 426:	8a 95       	dec	r24
 428:	e2 f7       	brpl	.-8      	; 0x422 <DIO_toggle+0x20>
 42a:	cb 01       	movw	r24, r22
 42c:	84 27       	eor	r24, r20
 42e:	8b bb       	out	0x1b, r24	; 27
		break;
 430:	08 95       	ret
		
		case PORT_B:
			togglebit(PORTB , pinNmber);
 432:	48 b3       	in	r20, 0x18	; 24
 434:	21 e0       	ldi	r18, 0x01	; 1
 436:	30 e0       	ldi	r19, 0x00	; 0
 438:	b9 01       	movw	r22, r18
 43a:	02 c0       	rjmp	.+4      	; 0x440 <DIO_toggle+0x3e>
 43c:	66 0f       	add	r22, r22
 43e:	77 1f       	adc	r23, r23
 440:	8a 95       	dec	r24
 442:	e2 f7       	brpl	.-8      	; 0x43c <DIO_toggle+0x3a>
 444:	cb 01       	movw	r24, r22
 446:	84 27       	eor	r24, r20
 448:	88 bb       	out	0x18, r24	; 24
		break;
 44a:	08 95       	ret
		
		case PORT_C:
			togglebit(PORTC , pinNmber);
 44c:	45 b3       	in	r20, 0x15	; 21
 44e:	21 e0       	ldi	r18, 0x01	; 1
 450:	30 e0       	ldi	r19, 0x00	; 0
 452:	b9 01       	movw	r22, r18
 454:	02 c0       	rjmp	.+4      	; 0x45a <DIO_toggle+0x58>
 456:	66 0f       	add	r22, r22
 458:	77 1f       	adc	r23, r23
 45a:	8a 95       	dec	r24
 45c:	e2 f7       	brpl	.-8      	; 0x456 <DIO_toggle+0x54>
 45e:	cb 01       	movw	r24, r22
 460:	84 27       	eor	r24, r20
 462:	85 bb       	out	0x15, r24	; 21
		break;
 464:	08 95       	ret
		
		case PORT_D:
			togglebit(PORTD , pinNmber);
 466:	42 b3       	in	r20, 0x12	; 18
 468:	21 e0       	ldi	r18, 0x01	; 1
 46a:	30 e0       	ldi	r19, 0x00	; 0
 46c:	b9 01       	movw	r22, r18
 46e:	02 c0       	rjmp	.+4      	; 0x474 <DIO_toggle+0x72>
 470:	66 0f       	add	r22, r22
 472:	77 1f       	adc	r23, r23
 474:	8a 95       	dec	r24
 476:	e2 f7       	brpl	.-8      	; 0x470 <DIO_toggle+0x6e>
 478:	cb 01       	movw	r24, r22
 47a:	84 27       	eor	r24, r20
 47c:	82 bb       	out	0x12, r24	; 18
 47e:	08 95       	ret

00000480 <interrupt0_init>:


void interrupt0_init(void)//
{
	
	button_init(PORT_D ,PIN2);
 480:	62 e0       	ldi	r22, 0x02	; 2
 482:	84 e4       	ldi	r24, 0x44	; 68
 484:	0e 94 66 00 	call	0xcc	; 0xcc <button_init>

	setbit(SREG,7); //Enable Global Interrupt
 488:	8f b7       	in	r24, 0x3f	; 63
 48a:	80 68       	ori	r24, 0x80	; 128
 48c:	8f bf       	out	0x3f, r24	; 63

	setbit(MCUCR ,ISC00); //choose External Interrupt sense rising edge
 48e:	85 b7       	in	r24, 0x35	; 53
 490:	81 60       	ori	r24, 0x01	; 1
 492:	85 bf       	out	0x35, r24	; 53
	setbit(MCUCR ,ISC01);
 494:	85 b7       	in	r24, 0x35	; 53
 496:	82 60       	ori	r24, 0x02	; 2
 498:	85 bf       	out	0x35, r24	; 53

	setbit(GICR ,INT0);//Enable External Interrupt_0
 49a:	8b b7       	in	r24, 0x3b	; 59
 49c:	80 64       	ori	r24, 0x40	; 64
 49e:	8b bf       	out	0x3b, r24	; 59
 4a0:	08 95       	ret

000004a2 <timer0_5s_start>:
#include "Timer_0.h"


void timer0_5s_start(void)
{
	clearbit(TCCR0 ,WGM00); //Choose normal mode
 4a2:	83 b7       	in	r24, 0x33	; 51
 4a4:	8f 7b       	andi	r24, 0xBF	; 191
 4a6:	83 bf       	out	0x33, r24	; 51
	clearbit(TCCR0 ,WGM01);
 4a8:	83 b7       	in	r24, 0x33	; 51
 4aa:	87 7f       	andi	r24, 0xF7	; 247
 4ac:	83 bf       	out	0x33, r24	; 51
	
	TCNT0 = 0xc; //set Initial value
 4ae:	8c e0       	ldi	r24, 0x0C	; 12
 4b0:	82 bf       	out	0x32, r24	; 50
	
 	setbit(TCCR0 ,CS00);  //SET Prescaler --> 1024
 4b2:	83 b7       	in	r24, 0x33	; 51
 4b4:	81 60       	ori	r24, 0x01	; 1
 4b6:	83 bf       	out	0x33, r24	; 51
 	setbit(TCCR0 ,CS02);
 4b8:	83 b7       	in	r24, 0x33	; 51
 4ba:	84 60       	ori	r24, 0x04	; 4
 4bc:	83 bf       	out	0x33, r24	; 51
	
	while( overflowsCounter1 < Number_0f_overflows_5s) //waiting completion  number of overflow 
 4be:	0b c0       	rjmp	.+22     	; 0x4d6 <timer0_5s_start+0x34>
	{
		while((TIFR & (1<<TOV0))==0);//waiting  timer overflow
 4c0:	08 b6       	in	r0, 0x38	; 56
 4c2:	00 fe       	sbrs	r0, 0
 4c4:	fd cf       	rjmp	.-6      	; 0x4c0 <timer0_5s_start+0x1e>
		setbit(TIFR ,TOV0); //clear TOV0 register
 4c6:	88 b7       	in	r24, 0x38	; 56
 4c8:	81 60       	ori	r24, 0x01	; 1
 4ca:	88 bf       	out	0x38, r24	; 56
		overflowsCounter1++; //increment number of overflow 
 4cc:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <overflowsCounter1>
 4d0:	8f 5f       	subi	r24, 0xFF	; 255
 4d2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <overflowsCounter1>
	TCNT0 = 0xc; //set Initial value
	
 	setbit(TCCR0 ,CS00);  //SET Prescaler --> 1024
 	setbit(TCCR0 ,CS02);
	
	while( overflowsCounter1 < Number_0f_overflows_5s) //waiting completion  number of overflow 
 4d6:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <overflowsCounter1>
 4da:	84 31       	cpi	r24, 0x14	; 20
 4dc:	88 f3       	brcs	.-30     	; 0x4c0 <timer0_5s_start+0x1e>
		while((TIFR & (1<<TOV0))==0);//waiting  timer overflow
		setbit(TIFR ,TOV0); //clear TOV0 register
		overflowsCounter1++; //increment number of overflow 
		
	}
	overflowsCounter1=0;//Clear overflows counter
 4de:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <overflowsCounter1>
 4e2:	08 95       	ret

000004e4 <timer0_500ms_start>:
}


void timer0_500ms_start(void)
{
	clearbit(TCCR0 ,WGM00); //Choose normal mode
 4e4:	83 b7       	in	r24, 0x33	; 51
 4e6:	8f 7b       	andi	r24, 0xBF	; 191
 4e8:	83 bf       	out	0x33, r24	; 51
	clearbit(TCCR0 ,WGM01);
 4ea:	83 b7       	in	r24, 0x33	; 51
 4ec:	87 7f       	andi	r24, 0xF7	; 247
 4ee:	83 bf       	out	0x33, r24	; 51
	
	TCNT0 = 0xc; //set Initial value
 4f0:	8c e0       	ldi	r24, 0x0C	; 12
 4f2:	82 bf       	out	0x32, r24	; 50
	
	setbit(TCCR0 ,CS00);  //SET Prescaler --> 1024
 4f4:	83 b7       	in	r24, 0x33	; 51
 4f6:	81 60       	ori	r24, 0x01	; 1
 4f8:	83 bf       	out	0x33, r24	; 51
	setbit(TCCR0 ,CS02);
 4fa:	83 b7       	in	r24, 0x33	; 51
 4fc:	84 60       	ori	r24, 0x04	; 4
 4fe:	83 bf       	out	0x33, r24	; 51
	
	while( overflowsCounter2 < Number_0f_overflows_500ms) //waiting completion  number of overflow
 500:	0b c0       	rjmp	.+22     	; 0x518 <timer0_500ms_start+0x34>
	{
		while((TIFR & (1<<TOV0))==0);//waiting  timer overflow
 502:	08 b6       	in	r0, 0x38	; 56
 504:	00 fe       	sbrs	r0, 0
 506:	fd cf       	rjmp	.-6      	; 0x502 <timer0_500ms_start+0x1e>
		setbit(TIFR ,TOV0); //clear TOV0 register
 508:	88 b7       	in	r24, 0x38	; 56
 50a:	81 60       	ori	r24, 0x01	; 1
 50c:	88 bf       	out	0x38, r24	; 56
		overflowsCounter2++; //increment number of overflow
 50e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 512:	8f 5f       	subi	r24, 0xFF	; 255
 514:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	TCNT0 = 0xc; //set Initial value
	
	setbit(TCCR0 ,CS00);  //SET Prescaler --> 1024
	setbit(TCCR0 ,CS02);
	
	while( overflowsCounter2 < Number_0f_overflows_500ms) //waiting completion  number of overflow
 518:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 51c:	82 30       	cpi	r24, 0x02	; 2
 51e:	88 f3       	brcs	.-30     	; 0x502 <timer0_500ms_start+0x1e>
		while((TIFR & (1<<TOV0))==0);//waiting  timer overflow
		setbit(TIFR ,TOV0); //clear TOV0 register
		overflowsCounter2++; //increment number of overflow
		
	}
	overflowsCounter2=0;//Clear overflows counter
 520:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 524:	08 95       	ret

00000526 <_exit>:
 526:	f8 94       	cli

00000528 <__stop_program>:
 528:	ff cf       	rjmp	.-2      	; 0x528 <__stop_program>
